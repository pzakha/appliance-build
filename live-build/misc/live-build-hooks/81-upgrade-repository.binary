#!/bin/bash -eu
#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

TOP=$(git rev-parse --show-toplevel 2>/dev/null)

if [[ -z "$TOP" ]]; then
	echo "Must be run inside the git repsitory."
	exit 1
fi

. "$TOP/scripts/functions.sh"

#
# gather debs for all pacakges installed on the image.
#
mkdir binary/packages
chroot binary bash -c \
	'dpkg-query -Wf "\${Package}=\${Version}\\n" >/packages/all-packages.list'
chroot binary bash -c "cd packages && xargs -a all-packages.list apt download"

#
# After downloading the packages, the package filenames any have the
# sequence of characters "%3a" embedded in them. These characters cause
# problems when the files are exported over HTTP via the Aptly served
# repository. Thus, we convert this sequence back to the original ":"
# character (which is what the sequence represents) as a workaround, so
# the files can be properly served by Aptly.
#
rename 's/\%3a/:/g' binary/packages/*.deb

#
# convert all-packages.list to a format appropriate for the 'Depends'
# section of a package definition.
#
# Example input:
#  bash=4.4.18-2ubuntu1
#  bc=1.07.1-2
# output:
#  bash (= 4.4.18-2ubuntu1), bc (= 1.07.1-2)
#
DEPENDS="$(tr '\n' ' ' <binary/packages/all-packages.list |
	sed 's/ *$/)/' | sed 's/ /), /g' | sed 's/=/ (= /g')"

#
# build the delphix-entire meta-pacakge
#
cp config/hooks/delphix-entire-template delphix-entire-control
sed -i "s/@@DEPENDS@@/${DEPENDS}/" delphix-entire-control
sed -i "s/@@DELPHIX_VERSION@@/1.0.0-$(date '+%Y%m%dT%H%M%S')/" \
	delphix-entire-control
equivs-build delphix-entire-control
rm delphix-entire-control

#
# Create the upgrade repository, put all the debs into it, and finally publish
# it (into ~/.aptly/public by default).
# We first clear any remnants from the previous run
#
rm -rf "$HOME/.aptly"
setup_gpg_key "$TOP/keys/dlpx-test-priv.gpg"
aptly repo create -distribution=bionic -component=dlpx upgrade-repo
aptly repo add upgrade-repo binary/packages
aptly repo add upgrade-repo delphix-entire*.deb
aptly publish repo -batch -passphrase=delphix upgrade-repo
rm delphix-entire*.deb

tar cf "${APPLIANCE_VARIANT}.repo" -C "$HOME" .aptly \
	-C "$PWD/binary/packages" all-packages.list

rm -rf binary/packages
