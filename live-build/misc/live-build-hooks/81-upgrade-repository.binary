#!/bin/bash -eux
#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This script is intended to be used as part of Delphix's build process.
# It's role is to generate a tar archive that contains an Aptly/APT
# repository of all of the packages that have been installed in the
# live-build "binary" directory. The intention, is this archive can then
# be used to upgrade an existing appliance, using the packages installed
# in this particular variant build.
#

set -o pipefail

#
# Here, we generate a list of all of the packages that have been
# installed in the "binary" chroot directory, including package version,
# and then use this list to download each of these packages.
#
# We must perform the package download while chrooted in the binary
# directory to ensure we use the same APT sources that were used when
# installing the packages.
#
# This directory of download packages will later be passed to Aptly to
# build our "upgrade repository".
#
chroot binary bash -eux <<'EOF'
set -o pipefail

mkdir -p /packages
cd /packages

dpkg-query -Wf '${Package}=${Version}\n' | xargs apt-get download
EOF

#
# After downloading the packages, the package filenames any have the
# sequence of characters "%3a" embedded in them. These characters cause
# problems when the files are exported over HTTP via the Aptly served
# repository. Thus, we convert this sequence back to the original ":"
# character (which is what the sequence represents) as a workaround, so
# the files can be properly served by Aptly.
#
rename 's/\%3a/:/g' binary/packages/*.deb

#
# Now we need to create the "delphix-entire" metapackage that will
# depend on all of the packages that have been installed in the binary
# chroot environment.
#
cp config/hooks/template.ctl delphix-entire.ctl

# shellcheck disable=SC2016
DEPENDS=$(chroot binary \
	dpkg-query -Wf '${Package} (=${Version}), ' | sed 's/, $//')

sed -i "s/@@DEPENDS@@/$DEPENDS/" delphix-entire.ctl
sed -i "s/@@VARIANT@@/$APPLIANCE_VARIANT/" delphix-entire.ctl
sed -i "s/@@DATE@@/$(date '+%Y%m%dT%H%M%S')/" delphix-entire.ctl

equivs-build delphix-entire.ctl

#
# Once we have the "delphix-entire" metapackage built, we need to
# install it into the variant's binary chroot environment, so that the
# appliance has this package installed. Otherwise, this package would
# wind up in the upgrade repository, but not already installed in a
# running appliance that hasn't yet be upgraded.
#
DEBS_DIRECTORY=$(mktemp -d -p /tmp tmp.debs.XXXXXXXXXX)

cp ./*.deb "$DEBS_DIRECTORY"
mv "$DEBS_DIRECTORY" "binary/$DEBS_DIRECTORY"
chroot binary bash -c "dpkg -i $DEBS_DIRECTORY/*.deb"

rm -rf "binary/$DEBS_DIRECTORY"

#
# Lastly, we generate the Aptly/APT repository using the directory full
# of packages previously downloaded, and the delphix-entire package that
# was just generated.
#
rm -rf ~/.aptly
aptly repo create -distribution=bionic -component=delphix upgrade-repository

aptly repo add upgrade-repository binary/packages
aptly repo add upgrade-repository ./*.deb

aptly publish repo -skip-signing upgrade-repository

tar -cf "$APPLIANCE_VARIANT.repo" -C ~/.aptly .

rm -rf binary/packages
