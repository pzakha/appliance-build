#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---

- fail:
    msg: "Required variable 's3uri' undefined or empty."
  when: s3uri is undefined or s3uri == ''

#
# We need to download the packages from S3 on the local system running
# the playbook, because the awscli tools may not be available on the
# remote system. Once the S3 directory/uri containing the packages is
# downloaded, we safely copy them to the remote system, and proceed with
# the installation.
#
# Further, the expectation is for the S3 uri to contain a directory
# containing one or more .deb files, as well as a SHA256SUMS file that
# can be used to verify the contents of the .deb files after the entire
# S3 uri is downloaded.
#

- tempfile:
    state: directory
    path: /tmp
  register: tempdir
  delegate_to: localhost

- command: aws s3 sync --only-show-errors "{{ s3uri }}" .
  delegate_to: localhost
  args:
    chdir: "{{ tempdir.path }}"

- copy:
    src: "{{ tempdir.path }}/"
    dest: "{{ tempdir.path }}/"
    mode: 0644

- command: sha256sum -c --strict SHA256SUMS
  args:
    chdir: "{{ tempdir.path }}"

#
# We use apt-get here instead of ansible's apt module to install all the debs
# at the same time, so that any dependencies between provided packages are
# resolved (i.e. if one of the .deb depends on another .deb being installed).
#
# We add 'DEBIAN_FRONTEND=noninteractive' which is meant for executing apt-get
# from a script. The DPkg:: options are defaults used by the ansible apt
# module that auto-answer some questions apt could ask.
#
# We use 'shell' instead of 'command' to resolve the glob (*.deb).
#
- shell: >
    apt-get install -y -o DPkg::Options::=--force-confold
    -o DPkg::Options::=--force-confdef ./*.deb
  environment:
    DEBIAN_FRONTEND: noninteractive
  args:
    chdir: "{{ tempdir.path }}"

#
# We backup downloaded packages. We will use them later to create our
# private package repository.
#
- name: Backup downloaded packages
  shell: "mv {{ tempdir.path }}/*.deb {{ pkgdump }}/"
  when: pkgdump is defined and pkgdump != ''

- file:
    path: "{{ tempdir.path }}"
    state: absent

- file:
    path: "{{ tempdir.path }}"
    state: absent
  delegate_to: localhost
